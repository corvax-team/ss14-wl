using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Content.Client.Guidebook.Controls;
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.UserInterface.ControlExtensions;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.Kitchen;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Guidebook.Controls._WL;

/// <summary>
///     Control for embedding a food recipe into a guidebook.
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideFoodRecipeEmbed : BoxContainer, IDocumentTag, ISearchableControl
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;
    private readonly SpriteSystem _sprite;

    public const string FullBeakerContentSpriteState = "beaker6";
    public const string BeakerSpritePath = "/Textures/Objects/Specific/Chemistry/beaker.rsi";

    public GuideFoodRecipeEmbed()
    {
        _sprite = _systemManager.GetEntitySystem<SpriteSystem>();
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideFoodRecipeEmbed(string recipe) : this()
    {
        GenerateControl(_prototype.Index<FoodRecipePrototype>(recipe));
    }

    public bool CheckMatchesSearch(string query)
    {
        return this.ChildrenContainText(query);
    }

    public void SetHiddenState(bool state, string query)
    {
        Visible = CheckMatchesSearch(query) ? state : !state;
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Recipe", out var id))
        {
            Logger.Error("Recipe embed tag is missing recipe prototype argument");
            return false;
        }

        if (!_prototype.TryIndex<FoodRecipePrototype>(id, out var recipe))
        {
            Logger.Error($"Specified food recipe prototype \"{id}\" is not a valid food recipe prototype");
            return false;
        }

        GenerateControl(recipe);

        control = this;
        return true;
    }

    private void GenerateControl(FoodRecipePrototype recipe)
    {
        NameBackground.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = Color.Gray
        };

        RecipeName.SetMarkup(recipe.Name);

        var reactants = recipe.IngredientsReagents.Concat(recipe.IngredientsSolids);

        foreach (var reactant in reactants)
        {
            var mainBox = new BoxContainer()
            {
                Orientation = LayoutOrientation.Vertical
            };

            var reactantName = "";
            var textures = new List<Texture>();
            if (_prototype.TryIndex<EntityPrototype>(reactant.Key, out var entProto))
            {
                reactantName = entProto.Name;
                textures.Add(_sprite.Frame0(entProto));
            }
            else if (_prototype.TryIndex<ReagentPrototype>(reactant.Key, out var reagentProto))
            {
                reactantName = reagentProto.LocalizedName;
            }

            mainBox.AddChild(new LayeredTextureRect()
            {
                Textures = textures
            });

            var name = new RichTextLabel();
            name.SetMarkup(Loc.GetString("guidebook-food-recipe-embed-reactant-name",
                ("name", reactantName),
                ("count", reactant.Value.ToString())));

            mainBox.AddChild(name);

            RecipeReactants.AddChild(mainBox);
        }

        CookingTime.SetMarkup(Loc.GetString("guidebook-food-recipe-embed-cooking-time", ("time", recipe.CookTime.ToString())));

        var resultProto = _prototype.Index<EntityPrototype>(recipe.Result);
        var productControl = new BoxContainer()
        {
            Orientation = LayoutOrientation.Vertical,
            Margin = new Thickness(0, 5)
        };
        productControl.AddChild(new TextureRect()
        {
            Texture = _sprite.Frame0(resultProto)
        });
        productControl.AddChild(new Label()
        {
            Text = resultProto.Name
        });

        RecipeProducts.AddChild(productControl);
    }
}
