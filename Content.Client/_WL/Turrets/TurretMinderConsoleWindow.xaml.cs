using Content.Client.Message;
using Content.Shared._WL.Turrets;
using Content.Shared.IdentityManagement;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._WL.Turrets;

[GenerateTypedNameReferences]
public sealed partial class TurretMinderConsoleWindow : DefaultWindow
{
    [Dependency]
    private readonly IEntityManager _entMan = default!;

    public event Action<NetEntity>? RideButtonPressed;

    public TurretMinderConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(TurretMinderConsoleBoundUserInterfaceState state)
    {
        ButtonsContainer.RemoveAllChildren();

        if (state.NetEntities.Count == 0)
        {
            ButtonsContainer.AddChild(new Label()
            {
                VerticalAlignment = VAlignment.Center,
                HorizontalAlignment = HAlignment.Center,
                Text = "Не найдено подключенных орудий."
            });

            return;
        }

        foreach (var entity in state.NetEntities)
        {
            ButtonsContainer.AddChild(GenerateButton(entity.Key, entity.Value));
        }
    }

    public BoxContainer GenerateButton(NetEntity entity, TurretMinderConsoleBUIStateEntry entry)
    {
        var main = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new(5),
        };

        var name = Identity.Name(_entMan.GetEntity(entity), _entMan);

        var labelBoxContainer = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal
        };

        var label = new Label()
        {
            Text = name,
            Margin = new(0, 0, 5, 0)
        };

        var addressLabel = new RichTextLabel()
        {
            Margin = new(0, 0, 20, 0)
        };
        addressLabel.SetMarkup("[color=gray]" + entry.Address + "[/color]");

        labelBoxContainer.AddChild(label);
        labelBoxContainer.AddChild(addressLabel);

        var button = new Button()
        {
            Text = "Управлять"
        };
        button.OnPressed += (args) => RideButtonPressed?.Invoke(entity);

        if (entry.Disabled)
        {
            button.Disabled = true;
            button.Text = "Занято";
        }

        main.AddChild(labelBoxContainer);
        main.AddChild(button);

        return main;
    }
}
