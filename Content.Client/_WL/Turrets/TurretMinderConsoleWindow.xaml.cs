using Content.Shared._WL.Turrets;
using Content.Shared.IdentityManagement;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Ame.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class TurretMinderConsoleWindow : DefaultWindow
    {
        [Dependency]
        private readonly IEntityManager _entMan = default!;

        public event Action<NetEntity>? RideButtonPressed;

        public TurretMinderConsoleWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
        }

        public void UpdateState(TurretMinderConsoleBoundUserInterfaceState state)
        {
            ButtonsContainer.RemoveAllChildren();

            foreach (var entity in state.NetEntities)
            {
                ButtonsContainer.AddChild(GenerateButton(entity));
            }
        }

        public BoxContainer GenerateButton(NetEntity entity)
        {
            var main = new BoxContainer()
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new(5),
            };

            var name = Identity.Name(_entMan.GetEntity(entity), _entMan);

            var label = new Label()
            {
                Text = name,
                Margin = new(0, 0, 10, 0)
            };

            var button = new Button()
            {
                Text = "Управлять"
            };
            button.OnPressed += (args) => RideButtonPressed?.Invoke(entity);

            main.AddChild(label);
            main.AddChild(button);

            return main;
        }
    }
}
