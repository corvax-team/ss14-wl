using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.IdentityManagement;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Content.Shared._WL.Xenobiology;


namespace Content.Client._WL.SlimeScanner.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class SlimeScannerWindow : FancyWindow
    {
        private readonly IEntityManager _entityManager;
        private readonly SpriteSystem _spriteSystem;
        private readonly IPrototypeManager _prototypes;

        public SlimeScannerWindow()
        {
            RobustXamlLoader.Load(this);

            _entityManager = IoCManager.Resolve<IEntityManager>();
            _spriteSystem = _entityManager.System<SpriteSystem>();
            _prototypes = IoCManager.Resolve<IPrototypeManager>();
        }

        public void Populate(SlimeScannerScannedUserMessage msg)
        {
            PossibleMutations.RemoveAllChildren();

            var target = _entityManager.GetEntity(msg.NetEntity);

            if (target == null)
            {
                NoSlimeDataText.FontColorOverride = Robust.Shared.Maths.Color.Red;
                NoSlimeDataText.FontColorShadowOverride = Robust.Shared.Maths.Color.Red;
                NoSlimeDataText.Visible = true;

                CharacteristicsGridContainer.Visible = false;

                MutationsTitle.Visible = false;
                return;
            }

            NoSlimeDataText.Visible = false;
            CharacteristicsGridContainer.Visible = true;

            string entityName = Loc.GetString("slime-scanner-window-unknown-slime");
            if (_entityManager.HasComponent<MetaDataComponent>(target.Value))
            {
                entityName = Identity.Name(target.Value, _entityManager);
            }

            SlimeName.SetMessage(FormattedMessage.FromMarkup(entityName), defaultColor: msg.CoreReagentColor);

            GrowthStage.SetMessage(FormattedMessage.FromMarkup($"{msg.GrowthStage}/{msg.MaxGrowthStage}"));

            CurrentHunger.SetMessage(FormattedMessage.FromMarkup((msg.CurrentHunger / msg.MaxHunger * 100f).ToString() + "%"));

            LifeStage.SetMessage(FormattedMessage.FromMarkup(msg.LifeStage));

            MutationProbability.SetMessage(FormattedMessage.FromMarkup((msg.MutationProbability * 100f).ToString() + '%'));

            CoreCost.SetMessage(FormattedMessage.FromMarkup($"{msg.CoreCost ?? 0d}$ " +
                $"{Loc.GetString("slime-scanner-window-or-separator")} " +
                $"{msg.CoreResearchPoints ?? 0f} {Loc.GetString("slime-scanner-window-research-point-prefix")}")); //Результат -- "Стоимость ядра: 6$ или 1200 О.И."

            if (msg.RelationshipPoints > 0)
            {
                RelationshipPoints.SetMessage(FormattedMessage.FromMarkup(msg.RelationshipPoints.ToString()));
                RelationshipPoints.Visible = true;
                RelationshipTitle.Visible = true;
            }
            else
            {
                RelationshipPoints.Visible = false;
                RelationshipTitle.Visible = false;
            }

            if (msg.FormattedMutationCondDesc.Count > 0)
            {
                MutationsTitle.Visible = true;

                DrawPossibleMutations(msg.FormattedMutationCondDesc);
            }
            else MutationsTitle.Visible = false;
        }

        private void DrawPossibleMutations(Dictionary<string, string> protoAndDesc)
        {
            foreach (var mutation in protoAndDesc)
            {
                PossibleMutations.AddChild(CreateMutationBox(mutation.Key, mutation.Value));
            }
        }

        private BoxContainer CreateMutationBox(string prototype, string formattedDesc)
        {
            var mainBox = new BoxContainer()
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(3, 10)
            };

            var gridContainer = new GridContainer()
            {
                HorizontalExpand = true,
                Columns = 2
            };

            var slimeEntityProto = _prototypes.Index<EntityPrototype>(prototype);

            var sprite = _spriteSystem.Frame0(slimeEntityProto);
            gridContainer.AddChild(new TextureRect()
            {
                Margin = new Thickness(5, 5),
                SetSize = new Vector2(30, 30),
                Texture = sprite
            });

            gridContainer.AddChild(new Label()
            {
                HorizontalExpand = true,
                Text = slimeEntityProto.Name,
                Margin = new Thickness(10, 0, 0, 0)
            });

            if (formattedDesc.Length > 0)
            {
                var mutation = new RichTextLabel()
                {
                    HorizontalExpand = true,
                    HorizontalAlignment = HAlignment.Center
                };
                var message = new FormattedMessage();
                message.AddMarkup(Loc.GetString("slime-scanner-window-possible-mutations-conditions",
                    ("conditions", formattedDesc)));
                mutation.SetMessage(message);

                gridContainer.AddChild(mutation);
            }

            mainBox.AddChild(gridContainer);

            return mainBox;
        }
    }
}
