using System.Numerics;
using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared._WL.CharacterInformation;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._WL.CharacterInformation;

[GenerateTypedNameReferences]
public sealed partial class CharacterInformationWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;

    private float _accumulatedTime;

    public CharacterInformationWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        _accumulatedTime += args.DeltaSeconds;
        CharSprite.OverrideDirection = (Direction) ((int) _accumulatedTime % 4 * 2);
    }

    public void UpdateState(CharacterInformationBuiState state)
    {
        CharSprite.SetEntity(_entity.GetEntity(state.Uid));
        Name.SetMarkup($"[bold]{state.CharacterName}[/bold]");

        if (!string.IsNullOrEmpty(state.FlavorText))
        {
            FlavorText.SetMessage(state.FlavorText);
            FlavorTextLabel.Visible = true;
        }
        if (!string.IsNullOrEmpty(state.OocText))
        {
            OocText.SetMessage(state.OocText);
            OocTextLabel.Visible = true;
        }

        if (string.IsNullOrEmpty(state.FlavorText) && string.IsNullOrEmpty(state.OocText))
        {
            Separator.Visible = false;
            TextScroll.Visible = false;
            RootWindow.MinSize = new Vector2(280, 400);
        }
        else
        {
            Separator.Visible = true;
            TextScroll.Visible = true;
            RootWindow.MinSize = new Vector2(700, 400);
        }
    }
}
